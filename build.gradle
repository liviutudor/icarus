apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'nebula.dependency-lock'
apply plugin: 'nebula.gradle-git-scm'
apply plugin: 'war'
buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "me.trnl:github-release-gradle-plugin:$githubReleaseVersion"
    }
}
apply plugin: 'console'
apply plugin: 'github'
apply plugin: 'release'

repositories {
    jcenter()
}

group = 'liviutudor'
version = '0.0.2-SNAPSHOT'
sourceCompatibility=1.7
targetCompatibility=1.7

def baseDir = "${project(':').projectDir}"

dependencies {
    compile "com.google.inject:guice:$guiceVersion"
    compile "com.google.inject.extensions:guice-servlet:$guiceVersion"
    compile "com.sun.jersey.contribs:jersey-guice:$jerseyVersion"
    compile "com.sun.jersey:jersey-server:$jerseyVersion"
    compile "javax.ws.rs:jsr311-api:$jsr311Version"
    compile "org.slf4j:slf4j-api:$slf4JVersion"

    compile "javax.servlet:javax.servlet-api:$javaxServletVersion"

    testCompile "cglib:cglib-nodep:$cgLibVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.objenesis:objenesis:$objenesisVersion"
    testCompile "org.spockframework:spock-core:$spockVersion"

}

dependencyLock {
    includeTransitives = true
}

// checkstyle
def checkStyleProps = ['baseDir': "$baseDir"]
checkstyle {
    toolVersion = "$checkstyleVersion"
    configProperties = checkStyleProps
    configFile = new File("$baseDir/config/checkstyle/checkstyle.xml")
    showViolations = true // set to true to print to console too
    ignoreFailures = false
}

// findbugs
findbugs {
    ignoreFailures = false
    excludeFilter = file("$baseDir/config/findbugs/excludeFilter.xml")
    toolVersion = "$findBugsVersion"
}

test {
    jacoco {
        excludes = ['.*Exception',
                    '.*Module']
    }
}
test.finalizedBy(project.tasks.jacocoTestReport)

release {
    /* Let's check that everything is committed */
    doFirst {
        if (!project.git.status().isEmpty()) {
            throw new GradleException('You have uncommitted changes.')
        }
    }

    /* Ask user for a release version, suggesting some default variant. */
    version = { console.prompt(' > Please enter release version:', project.version - '-SNAPSHOT') }
    tag = { "r$project.release.version" }
    commitMessage = { "Release $project.release.version" }

    /* Files and projects that needs to be updated with a new release version.
    update {
        file project('driver-compat').file('src/main/com/mongodb/Mongo.java')
        file project.file('build.gradle')
        projects allprojects
    }
    */

    /* Spec for next version. As above, asking user input.*/
    next {
        //version = { console.prompt(' > Please enter next version:', project.release.version) }
        version = "${project.release.version}-SNAPSHOT"
        println "Using next version $project.release.next.version"
        commitMessage = { "Release ${project.release.next.version}" }
    }

    /* Tasks that needs to be performed during release. Will be done after tag step. */
}
